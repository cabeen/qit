#! /usr/bin/env bash
################################################################################
#
# Quantitative Imaging Toolkit (QIT) (c) 2012-2022 Ryan Cabeen
# All rights reserved.
#
# The Software remains the property of Ryan Cabeen ("the Author").
#
# The Software is distributed "AS IS" under this Licence solely for
# non-commercial use in the hope that it will be useful, but in order
# that the Author as a charitable foundation protects its assets for
# the benefit of its educational and research purposes, the Author
# makes clear that no condition is made or to be implied, nor is any
# warranty given or to be implied, as to the accuracy of the Software,
# or that it will be suitable for any particular purpose or for use
# under any specific conditions. Furthermore, the Author disclaims
# all responsibility for the use which is made of the Software. It
# further disclaims any liability for the outcomes arising from using
# the Software.
#
# The Licensee agrees to indemnify the Author and hold the
# Author harmless from and against any and all claims, damages and
# liabilities asserted by third parties (including claims for
# negligence) which arise directly or indirectly from the use of the
# Software or the sale of any products based on the Software.
#
# No part of the Software may be reproduced, modified, transmitted or
# transferred in any form or by any means, electronic or mechanical,
# without the express permission of the Author. The permission of
# the Author is not required if the said reproduction, modification,
# transmission or transference is done without financial return, the
# conditions of this Licence are imposed upon the receiver of the
# product, and all original and amended source code is included in any
# transmitted product. You may be held legally responsible for any
# copyright infringement that is caused or encouraged by your failure to
# abide by these terms and conditions.
#
# You are not permitted under this Licence to use this Software
# commercially. Use for which any financial return is received shall be
# defined as commercial use, and includes (1) integration of all or part
# of the source code or the Software into a product for sale or license
# by or on behalf of Licensee to third parties or (2) use of the
# Software or any derivative of it for research with the final aim of
# developing software products for sale or license to a third party or
# (3) use of the Software or any derivative of it for research with the
# final aim of developing non-software products for sale or license to a
# third party, or (4) use of the Software to provide any service to an
# external organisation for which payment is received.
#
################################################################################

usage()
{
    echo "
Name: $(basename $0)

Description:
  Prepare diffusion-weighted imaging data for the qit brain workflow. This 
will standardize the image orientation, match the b-vector orientation, and 
create a subject directory.
    
Usage: 

  $(basename $0) [opts] --dwi dwi --bvecs bvecs --bvals bvals --subject subject


Required Parameters:

   --dwi dwi.nii.gz:   the diffusion weighted MRI file, stored in NIFTI
   --bvecs bvecs:      the diffusion b-vectors file, stored as text
   --bvals bvals:      the diffusion b-values file, stored as text
   --subject subject:  the subject directory where the results will be saved

Optional Parameters:

   --denoise h:        denoise the dwi with the given noise level
   --mask:             use the given precomputed brain mask
   --bet:              use the given FSL BET fraction parameter 
   --erode n:          erode the brain mask by the given number of voxels
   --motion:           correct for motion and create a summary report
   --tone:             specify a T1-weighted MRI
   --freesurfer:       use the given precomputed freesurfer results

Author: Ryan Cabeen
"

exit 1
}

if [ $# -eq 0 ]; then usage; fi

dwi=
bvecs=
bvals=
subject=

tone=
freesurfer=
mask=
erode=1
denoise=
motion=
bet=0.3

while [ "$1" != "" ]; do
    case $1 in
        --dwi)          shift; dwi=$1 ;;
        --bvecs)        shift; bvecs=$1 ;;
        --bvals)        shift; bvals=$1 ;;
        --mask)         shift; mask=$1 ;;
        --bet)          shift; bet=$1 ;;
        --denoise)      shift; denoise=$1 ;;
        --motion)       motion=1 ;;
        --tone)         shift; tone=$1 ;;
        --freesurfer)   shift; freesurfer=$1 ;;
        --subject)      shift; subject=$1 ;;
        --help )        usage ;;
    esac
    shift
done

if [ "${dwi}" == "" ]; then echo "dwi is missing!"; exit 1; fi 
if [ "${bvecs}" == "" ]; then echo "bvecs is missing!"; exit 1; fi 
if [ "${bvals}" == "" ]; then echo "bvals is missing!"; exit 1; fi 
if [ "${subject}" == "" ]; then echo "subject is missing!"; exit 1; fi 

echo "started $(basename $0)" 
echo "... using dwi: ${dwi}" 
echo "... using bvecs: ${bvecs}" 
echo "... using bvals: ${bvals}" 
echo "... using mask: ${mask}" 
echo "... using erode: ${erode}" 
echo "... using denoise: ${denoise}" 
echo "... using motion: ${motion}" 
echo "... using subject: ${subject}" 

mkdir -p ${subject}/input
mkdir -p ${subject}/input/raw

run="qit --verbose --debug -Xmx8G"

if [ "${tone}" != "" ]; then
  echo "... importing t1 scan"
  cp ${tone} ${subject}/input/t1.nii.gz
fi

if [ "${freesurfer}" != "" ]; then
  echo "... importing user freesurfer results"
  if [ ! -e ${subject}/input/t1.nii.gz ]; then
    touch ${subject}/input/t1.nii.gz
  fi
  cp -r ${freesurfer} ${subject}/tone.fs
fi

cp ${bvecs} ${subject}/input/raw/bvecs.txt
cp ${bvals} ${subject}/input/raw/bvals.txt

if [[ ${dwi} == *nii ]]; then
	cp ${dwi} ${subject}/input/raw/dwi.nii
	gzip ${subject}/input/raw/dwi.nii
elif [[ ${dwi} == *nii.gz ]]; then
	cp ${dwi} ${subject}/input/raw/dwi.nii.gz
else
	echo "expected nifti dwi: ${dwi}"
	exit 1
fi


echo "... standardizing dwi"
${run} VolumeStandardize \
  --input ${subject}/input/raw/dwi.nii.gz \
  --xfm ${subject}/input/xfm.txt \
  --invxfm ${subject}/input/invxfm.txt \
  --output ${subject}/input/dwi.nii.gz

if [ "${denoise}" != "" ]; then
  echo "... denoising"
	qit --verbose --debug -Xmx8G VolumeFilterNLM --rician --h ${denoise} \
		--input ${subject}/input/dwi.nii.gz \
		--output ${subject}/input/dwi.nii.gz
fi

if [ "${mask}" != "" ]; then
  echo "... importing user mask"
  cp ${mask} ${subject}/input/raw/mask.nii.gz
	${run} VolumeStandardize \
		--input ${subject}/input/raw/mask.nii.gz \
		--output ${subject}/input/mask.nii.gz
else
	echo "... extracting mask"
	${run} -Xmx8G VolumeBrainExtract \
		--input ${subject}/input/dwi.nii.gz \
    --frac ${bet} \
		--output ${subject}/input/mask.nii.gz
	${run} MaskErode \
		--input ${subject}/input/mask.nii.gz \
    --num ${erode} \
		--output ${subject}/input/mask.nii.gz
fi

echo "... standardizing bvectors and bvalues"
${run} GradientsMatch \
  --input ${subject}/input/raw/bvecs.txt \
  --dwi ${subject}/input/dwi.nii.gz \
  --mask ${subject}/input/mask.nii.gz \
  --output ${subject}/input/bvecs.txt

if [ "${motion}" != "" ]; then
  echo "... running motion correction"
	${run} VolumeDwiMotionEstimation \
		--input ${subject}/input/dwi.nii.gz \
		--output ${subject}/input/motion

	${run} VolumeDwiCorrect \
		--input-dwi ${subject}/input/dwi.nii.gz \
		--input-bvecs ${subject}/input/bvecs.txt \
		--input-bvals ${subject}/input/bvals.txt \
		--output-dwi ${subject}/input/dwi.nii.gz \
		--output-bvecs ${subject}/input/bvecs.txt \
		--output-bvals ${subject}/input/bvals.txt
fi

echo "finished $(basename $0)"

################################################################################
# End of file
################################################################################
