#!/bin/bash
################################################################################
#
# Quantitative Imaging Toolkit (QIT) (c) 2012-2022 Ryan Cabeen
# All rights reserved.
#
# The Software remains the property of Ryan Cabeen ("the Author").
#
# The Software is distributed "AS IS" under this Licence solely for
# non-commercial use in the hope that it will be useful, but in order
# that the Author as a charitable foundation protects its assets for
# the benefit of its educational and research purposes, the Author
# makes clear that no condition is made or to be implied, nor is any
# warranty given or to be implied, as to the accuracy of the Software,
# or that it will be suitable for any particular purpose or for use
# under any specific conditions. Furthermore, the Author disclaims
# all responsibility for the use which is made of the Software. It
# further disclaims any liability for the outcomes arising from using
# the Software.
#
# The Licensee agrees to indemnify the Author and hold the
# Author harmless from and against any and all claims, damages and
# liabilities asserted by third parties (including claims for
# negligence) which arise directly or indirectly from the use of the
# Software or the sale of any products based on the Software.
#
# No part of the Software may be reproduced, modified, transmitted or
# transferred in any form or by any means, electronic or mechanical,
# without the express permission of the Author. The permission of
# the Author is not required if the said reproduction, modification,
# transmission or transference is done without financial return, the
# conditions of this Licence are imposed upon the receiver of the
# product, and all original and amended source code is included in any
# transmitted product. You may be held legally responsible for any
# copyright infringement that is caused or encouraged by your failure to
# abide by these terms and conditions.
#
# You are not permitted under this Licence to use this Software
# commercially. Use for which any financial return is received shall be
# defined as commercial use, and includes (1) integration of all or part
# of the source code or the Software into a product for sale or license
# by or on behalf of Licensee to third parties or (2) use of the
# Software or any derivative of it for research with the final aim of
# developing software products for sale or license to a third party or
# (3) use of the Software or any derivative of it for research with the
# final aim of developing non-software products for sale or license to a
# third party, or (4) use of the Software to provide any service to an
# external organisation for which payment is received.
#
################################################################################
#
# Name: QFSXFM
#
# Description:
#
#   This program applies a spatial transformation to Freesurfer results.  The 
#   input should be an imported Freesurfer directory, created by the 
#   FreesurferImport QIT module.
#
# Arguments:
# 
#  input: the input freesurfer subject directory
#  reference: the reference volume for resampling (nifti)
#  xfm: the transformation (from reference to input space) (nifti)
#  invxfm: the inverse transformation (from input to reference space) (nifti)
#  output: the output freesurfer directory
#
# Author: Ryan Cabeen
#
################################################################################

if [ $# -ne "5" ]; then
    echo "Usage: $(basename ${0}) <input> <reference> <xfm> <invxfm> <output>"
    exit
fi

abspath() 
{
    cd "$(dirname "$1")"
    printf "%s/%s\n" "$(pwd)" "$(basename "$1")"; 
}

echo started

input=$1
ref=$2
xfm=$3
invxfm=$4
output=$5

tmp=${output}.tmp.${RANDOM}

echo using input: ${input} 
echo using reference: ${reference} 
echo using xfm: ${xfm} 
echo using output: ${output} 
echo using temp: ${tmp} 

mkdir -p ${tmp}

function runit
{
  $@; if [ $? != 0 ]; then echo "[error] command failed: $@"; exit; fi
}

function volxfm
{
  echo "... transforming $1"
  if [ -e ${1} ] && [ ! -e ${2} ]; then
		runit qit --verbose VolumeTransform --reference ${ref} --deform ${xfm} \
			--input $1 --interp Tricubic --output $2
  fi
}

function maskxfm
{
  echo "... transforming $1"
  if [ -e ${1}.nii.gz ] && [ ! -e ${2}.nii.gz ]; then
		runit qit --verbose MaskTransform --reference ${ref} --deform ${xfm} \
			--input ${1}.nii.gz --output ${2}.nii.gz
  fi

  if [ -e ${1}.csv ] && [ ! -e ${2}.csv ]; then
    runit cp ${1}.csv ${2}.csv
  fi
}

function meshxfm 
{
  echo "... transforming $1"
  if [ -e ${1} ] && [ ! -e ${2} ]; then
		runit qit --verbose MeshTransform --deform ${invxfm} \
			--input $1 --attrs coord,white,pial,smoothwm,inflated,middle --output $2
  fi
}

volxfm ${input}/brain.nii.gz ${tmp}/brain.nii.gz

if [ -e ${input}/brain.xfm ]; then
  runit cp ${input}/brain.xfm ${tmp}/brain.xfm
fi

for region in ribbon {ccwm,wbbm,scgm}/rois {dk,lb}{gm,wm,bm}/rois segs/{aseg,aparc+aseg}; do
  mkdir -p $(dirname ${tmp}/${region})
  maskxfm ${input}/${region} ${tmp}/${region}
done

for mesh in {lh,rh}.{native,reg}.vtk.gz; do
  meshxfm ${input}/${mesh} ${tmp}/${mesh}
done

echo cleaning up
if [ -e ${output} ]; then
  mv ${output} ${output}.bck.$(date "+%F-%T")
fi
mv ${tmp} $output

echo finished

################################################################################
# End of file
################################################################################
