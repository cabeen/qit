#! /usr/bin/env bash
################################################################################
#
# Quantitative Imaging Toolkit (QIT) (c) 2012-2022 Ryan Cabeen
# All rights reserved.
#
# The Software remains the property of Ryan Cabeen ("the Author").
#
# The Software is distributed "AS IS" under this Licence solely for
# non-commercial use in the hope that it will be useful, but in order
# that the Author as a charitable foundation protects its assets for
# the benefit of its educational and research purposes, the Author
# makes clear that no condition is made or to be implied, nor is any
# warranty given or to be implied, as to the accuracy of the Software,
# or that it will be suitable for any particular purpose or for use
# under any specific conditions. Furthermore, the Author disclaims
# all responsibility for the use which is made of the Software. It
# further disclaims any liability for the outcomes arising from using
# the Software.
#
# The Licensee agrees to indemnify the Author and hold the
# Author harmless from and against any and all claims, damages and
# liabilities asserted by third parties (including claims for
# negligence) which arise directly or indirectly from the use of the
# Software or the sale of any products based on the Software.
#
# No part of the Software may be reproduced, modified, transmitted or
# transferred in any form or by any means, electronic or mechanical,
# without the express permission of the Author. The permission of
# the Author is not required if the said reproduction, modification,
# transmission or transference is done without financial return, the
# conditions of this Licence are imposed upon the receiver of the
# product, and all original and amended source code is included in any
# transmitted product. You may be held legally responsible for any
# copyright infringement that is caused or encouraged by your failure to
# abide by these terms and conditions.
#
# You are not permitted under this Licence to use this Software
# commercially. Use for which any financial return is received shall be
# defined as commercial use, and includes (1) integration of all or part
# of the source code or the Software into a product for sale or license
# by or on behalf of Licensee to third parties or (2) use of the
# Software or any derivative of it for research with the final aim of
# developing software products for sale or license to a third party or
# (3) use of the Software or any derivative of it for research with the
# final aim of developing non-software products for sale or license to a
# third party, or (4) use of the Software to provide any service to an
# external organisation for which payment is received.
#
################################################################################
#
# Name: QVOLBLOCK
#
# Description:
#
#   Apply a module to a volume with parallel processing.  This breaks the 
#   volume into blocks (smaller than a slice), distributes the specified
#   processing to the grid, and combines the results back into a full model
#   volume.  For example, when fitting advanced diffusion models, this can 
#   reduce the total runtime from hours to under 20 minutes.
# 
#   The module must have an interface like so:
# 
#     qit ModuleName [opts] \
#        --input input.nii.gz \
#        --mask mask.nii.gz \
#        --output output.nii.gz \
#
#   The module supports the following environment variables:
#
#     QBLOCK_I: the size of the block in the i-dimension
#     QBLOCK_J: the size of the block in the j-dimension
#     QBLOCK_K: the size of the block in the k-dimension
#
# Author: Ryan Cabeen
#
################################################################################

if [ $# -lt "4" ]; then
    echo "Usage: $(basename $0) <module> <input> <mask> <output> [opts]"
    exit
fi

echo started

# this assumes that the parent directory must exist 
# (although not the specific file)
abspath() 
{
    cd "$(dirname "$1")"
    printf "%s/%s\n" "$(pwd)" "$(basename "$1")"; 
}

if [ -z "${QBLOCK_I+xxx}" ]; then
    QBLOCK_I="1"
fi

if [ -z "${QBLOCK_J+xxx}" ]; then
    QBLOCK_J="64"
fi

if [ -z "${QBLOCK_K+xxx}" ]; then
    QBLOCK_K="64"
fi

if [ -z "${QMEM+xxx}" ]; then
    QMEM="8G"
fi

name=$(basename $0)
barg="--i ${QBLOCK_I} --j ${QBLOCK_J} --k ${QBLOCK_K}"
qitcmd="qit --dtype float -Xmx${QMEM} --verbose --debug"

module=${1}
input=$(abspath ${2})
mask=$(abspath ${3})
out=$(abspath ${4})
args=${@:5}

base=$(basename ${out})
rid=${RANDOM}
tmp=$(dirname ${out})/${name}.tmp.${rid}
tmp=${out}.tmp.${rid}

echo using input: ${input}
echo using mask: ${mask}
echo using out: ${out}
echo using args: ${args}
echo using rid: ${rid}
echo using tmp: ${tmp}
echo using QBLOCK_I: ${QBLOCK_I}
echo using QBLOCK_J: ${QBLOCK_J}
echo using QBLOCK_K: ${QBLOCK_K}
echo using QMEM: ${QMEM}

rm -rf ${tmp}
mkdir -p ${tmp}

echo blocking volumes
${qitcmd} VolumeBlockWrite --input ${input} --output ${tmp}/blocks/block.%d/input.nii.gz ${barg}
${qitcmd} VolumeBlockWrite --input ${mask} --output ${tmp}/blocks/block.%d/mask.nii.gz ${barg}

echo submitting jobs blockwise fitting 
bids=$(echo ${tmp}/blocks/block.* | xargs -n 1 echo | sed 's/.*block\.//g')
for bid in ${bids}; do
  echo "... submitting job for block ${bid}"
  jdir=${tmp}/blocks/block.${bid}

  jid="qmodelfit.job.${rid}.block.${bid}"
  jids="${jids}${jids+,}${jid}"

  jbin=${jdir}/run.sh
  jout=${jdir}/run.out
  jerr=${jdir}/run.err

  if [ -z "${QARGS+xxx}" ]; then
      QARGS="-V"
  fi
  
  echo "#!/usr/bin/env bash" > ${jbin}
  echo "cd ${jdir}" >> ${jbin}
  echo "qit --verbose --debug ${module} ${args} --input input.nii.gz --mask mask.nii.gz --output ${base}" >> ${jbin}
  chmod a+x ${jbin}

  ${QCMD-qsub} ${QARGS} -N ${jid} -o ${jout} -e ${jerr} ${jbin}
done

echo waiting for jobs to finish
${QCMD-qsub} -sync y -N ${name}.sync.${rid} -hold_jid ${jids} \
    -o /dev/null -e /dev/null -b y "echo done"

join=${tmp}/join.sh
echo "#!/usr/bin/env bash" > ${join}
echo "cd ${tmp}" >> ${join}
echo "${qitcmd} VolumeBlockRead --ref ${mask} --input blocks/block.%d/${base} --output ${base} ${barg}" >> ${join}

echo joining models 
bash ${join}

if [ $? -eq "0" ]; then 
	echo cleaning up
	if  [ -e ${out} ]; then
			bout=${out}.bck.${rid}
			echo "warning: backing up existing results to ${bout}"
			mv ${out} ${bout}
	fi

	mv ${tmp}/${base} ${out}

	if  [ -e ${out} ]; then
		echo "cleaning up"
		rm -rf ${tmp}
	fi

	echo finished
fi

################################################################################
# End of file
################################################################################
