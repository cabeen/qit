#! /bin/bash
################################################################################
#
# Quantitative Imaging Toolkit (QIT) (c) 2012-2022 Ryan Cabeen
# All rights reserved.
#
# The Software remains the property of Ryan Cabeen ("the Author").
#
# The Software is distributed "AS IS" under this Licence solely for
# non-commercial use in the hope that it will be useful, but in order
# that the Author as a charitable foundation protects its assets for
# the benefit of its educational and research purposes, the Author
# makes clear that no condition is made or to be implied, nor is any
# warranty given or to be implied, as to the accuracy of the Software,
# or that it will be suitable for any particular purpose or for use
# under any specific conditions. Furthermore, the Author disclaims
# all responsibility for the use which is made of the Software. It
# further disclaims any liability for the outcomes arising from using
# the Software.
#
# The Licensee agrees to indemnify the Author and hold the
# Author harmless from and against any and all claims, damages and
# liabilities asserted by third parties (including claims for
# negligence) which arise directly or indirectly from the use of the
# Software or the sale of any products based on the Software.
#
# No part of the Software may be reproduced, modified, transmitted or
# transferred in any form or by any means, electronic or mechanical,
# without the express permission of the Author. The permission of
# the Author is not required if the said reproduction, modification,
# transmission or transference is done without financial return, the
# conditions of this Licence are imposed upon the receiver of the
# product, and all original and amended source code is included in any
# transmitted product. You may be held legally responsible for any
# copyright infringement that is caused or encouraged by your failure to
# abide by these terms and conditions.
#
# You are not permitted under this Licence to use this Software
# commercially. Use for which any financial return is received shall be
# defined as commercial use, and includes (1) integration of all or part
# of the source code or the Software into a product for sale or license
# by or on behalf of Licensee to third parties or (2) use of the
# Software or any derivative of it for research with the final aim of
# developing software products for sale or license to a third party or
# (3) use of the Software or any derivative of it for research with the
# final aim of developing non-software products for sale or license to a
# third party, or (4) use of the Software to provide any service to an
# external organisation for which payment is received.
#
################################################################################

if [ $# -ne "5" ] && [ $# -ne "6" ]; then
  echo "Usage: ${name} [--nomatch] <dwi> <bvecs> <bvals> <bet> <output>"; exit
fi

nomatch=""
posit=()

while [ "$1" != "" ]; do
    case $1 in
        --nomatch)      nomatch=1 ;;
        * )             posit+=("$1") ;;
    esac
    shift
done

set -- "${posit[@]}" # restore positional parameters

dwi=$1
bvecs=$2
bvals=$3
bet=$4
output=$5

tmp=${output}.tmp.${RANDOM}
mkdir -p ${tmp}
mkdir -p ${tmp}/prep
mkdir -p ${tmp}/eddy

echo "starting dwi eddy correction"
echo "using: ${tmp}"
echo "using nomatch: ${nomatch}"
echo "using dwi: ${dwi}"
echo "using bvecs: ${bvecs}"
echo "using bvals: ${bvals}"
echo "using output: ${output}"

num=$(fslhd ${dwi} | grep ^dim4 | awk '{print $2}')
echo "number of gradients: ${num}"

# Note: if we apply this step, then we also have to 
#       repeat this for the brain mask as well 
#
# echo "checking and correcting odd dimensions if needed"
# qit VolumeCrop \
#   --even \
#   --input ${dwi} \
#   --output ${tmp}/prep/dwi.nii.gz
#
# Skip the step above, and just copy it over instead:

echo "importing dwi"
cp ${dwi} ${tmp}/prep/dwi.nii.gz

echo "extracting baselines"
qit VolumeDwiBaseline \
  --input ${tmp}/prep/dwi.nii.gz \
  --gradients ${bvecs} \
  --mean ${tmp}/prep/baseline.nii.gz

if [ "${nomatch}" == "" ]; then
	echo "matching gradients"
	qit GradientsMatch \
		--input ${bvecs} \
		--dwi ${tmp}/prep/dwi.nii.gz \
		--output ${tmp}/prep/bvecs.match.txt
else
  echo "skipping matching"
  cp ${bvecs} ${tmp}/prep/bvecs.match.txt
  cp ${bvals} ${tmp}/prep/bvals.match.txt
fi

echo "formatting gradients"
qit GradientsTransform \
  --round \
  --flip x \
  --input ${tmp}/prep/bvecs.match.txt \
  --output ${tmp}/prep/bvecs.flip.txt

echo "transposing gradients"
qit VectsTransform --rows \
  --input ${tmp}/prep/bvecs.flip.txt --output ${tmp}/prep/bvecs
qit VectsTransform --rows \
  --input ${tmp}/prep/bvals.flip.txt --output ${tmp}/prep/bvals

echo "defining parameters"
idx=""
for i in $(seq ${num}); do
  idx="${idx} 1"
done

echo ${idx} > ${tmp}/prep/index.txt
echo "1 0 0 0.108420" > ${tmp}/prep/acqparams.txt

if [ -e ${bet} ]; then
	echo "copying bet mask"
  cp ${bet} ${tmp}/prep/brain_mask.nii.gz
else
	echo "running bet"
	bet ${tmp}/prep/baseline.nii.gz ${tmp}/prep/brain -m -f ${bet} 
fi

echo "running eddy"
mkdir -p ${tmp}/eddy
eddycmd="eddy"
 if [ ! $(which eddy) ]; then eddycmd=eddy_openmp; fi

${eddycmd} --verbose \
  --repol \
	--imain=${tmp}/prep/dwi.nii.gz \
	--mask=${tmp}/prep/brain_mask.nii.gz \
	--acqp=${tmp}/prep/acqparams.txt \
	--index=${tmp}/prep/index.txt \
	--bvecs=${tmp}/prep/bvecs \
	--bvals=${tmp}/prep/bvals \
	--out=${tmp}/eddy/out

if [ $(command -v eddy_quad) ]; then 
  eddy_quad -v \
    ${tmp}/eddy/out \
    -i ${tmp}/prep/index.txt \
    -par ${tmp}/prep/acqparams.txt \
    -m ${tmp}/prep/brain_mask.nii.gz \
    -b ${tmp}/prep/bvals \
    -o ${tmp}/quad
else
  echo "warning: FSL EDDY_QUAD not found, skipping quality control"
fi

if [ ! -e ${tmp}/eddy/out.nii.gz ]; then
  echo "error FSL EDDY failed, results are saved to ${tmp}"
  exit 1
fi

mv ${tmp}/eddy/out.nii.gz ${tmp}/dwi.nii.gz
cp ${tmp}/prep/brain_mask.nii.gz ${tmp}/mask.nii.gz

cp ${tmp}/prep/bvals ${tmp}/prep/bvals.eddy.txt
cp ${tmp}/eddy/out.eddy_rotated_bvecs ${tmp}/prep/bvecs.eddy.txt
qit GradientsTransform \
  --flip x \
  --input ${tmp}/prep/bvecs.eddy.txt \
  --output ${tmp}/bvecs.txt

qit MapEddy \
  --input ${tmp}/eddy/out.eddy_restricted_movement_rms \
  --output ${tmp}/map.csv

echo "cleaning up"
if [ -e ${output} ]; then
	backup=${output}.bck.${RANDOM}
	echo "backing up previous results to ${backup}"
	mv ${output} ${backup}
fi

mv ${tmp} ${output}

echo "finished"

################################################################################
# FIN 
################################################################################
